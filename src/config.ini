; Configuration file for main.py

[exec]
; Execution options

; Random Seed. Set to -1 if a random seed is desired.
rand = 26
; Boolean: Print debugging messages
debug = True
; Boolean: Print the execution time
timing = True
; Whether to use the pickle format or the json format when saving
save_format = json

[sim]
; General simulation options

; ID of sim, to be appended to any files saved
sim_id = TDFPM_f1e-2
; Filename of an RN file to load. If this is not None, then all other RN 
;   settings will be ignored, as it will load from file instead.
load_RN_fname = RN_DOE_2222020_E4_trained.json.gz
; If RN_preset is not None, ignore [RN-dim] and [RN-pins], and use one of the
;   following standard RN shapes:
;     "None" : Use the custom dimensions & pins specified below
;     "db9" : 2D model of a db9 connector
;     "3dc6p" : 3D cube with 6 pins
;     "2ds4p" : 2D square with 4 pins
;     "3df2d" : 3D, but flat-ish like 2D
;     "3df2dx2" : Same as 3df2d, but 2x bigger in each dimension
;     "f22" : Flat-ish sim with 2 inputs and 2 outputs
;   TODO: These could be stored in separate .ini files, to simplify this one
RN_preset = f22
; Whether to show plot of network
show_RNfig = False
; Whether to save the figure to file
save_RNfig = False
; Whether to save the RN to file
save_RN = True

[sims]
; List of sims to be run. 
; Each entry is a boolean saying whether or not to run that sim

; Calculate equivalent resistance
res = False
; Power sim
power = False
; Burn out some fibers
burn = False
; Create an I-V curve
scan_iv = False
; Train
train = False
; Train a set of IO data
train_set = False
; Thermal expansion test
expand = False
; Forward pass
fwd_pass = True

[sim-res]
; Resistance simulation options

; Name of pins to calculate resistance across
pin0 = in0
;in1
pin1 = out1
;out0

[sim-power]
; Power simulation options

; Voltage to apply
V = 100
; Name of pins to apply voltage across
vin_pin = in0
;in1
vout_pin = out1
;out0

; Whether to show power plot
show_pfig = False
; Whether to save the figure to file
save_pfig = True

; Whether to show and save voltage plot
show_vfig = False
save_vfig = True

; Options to add: 
;  - Mark max power edge/pin with X
;  - Also plot voltage at each fiber
;  - Power in fibers, not edges

[sim-burn]
; Resistance simulation options

; Set to True to burn one fiber per burn and ignore the next two settings
one_per = True
; First burn voltage
V0 = 20
; How much to increase voltage each burn
V_step = 2.5
; Name of pins to calculate resistance across
pin0 = in0
pin1 = out1
; How many burns to run
burns = 10
; Whether to save a copy of the RN at the end of training
save_last_RN = True
; Whether to save a copy of the RN after each burn
save_each_RN = False
; Whether to show and save a plot of the RN voltage at each burn
show_each_v = False
save_each_v = False
; Whether to show and save a plot of the RN power at each burn
show_each_p = False
save_each_p = True

[sim-scan_iv]
; IV Curve generation options

pin0 = in0
pin1 = out1
; Define the voltage range and step size
V_max = 240
V_step = 2
; Whether to save a copy of the RN at the end of the scan
save_last_RN  = True

[sim-train]
; Training options

; csv file containing the inputs and desired outputs.
; If IO_fname is not None, then N_in and N_out are ignored.
IO_fname = IO_XOR.csv
; Binary number for the input, corresponding to which input pins are high
N_in = 0b11
; Binary number for the desired output
N_out = 0b01
; Max number of burns
max_burns = 32
; Threshold, as a fraction of the lowest current desired output
; If this is low, then you are asking the training to continue for a long time
threshold_fraction = 0.75
; How many fibers to burn per burn step
burn_rate = 6
; Whether to save a plot of the RN power & voltage at each burn
save_each_p = False
save_each_v = False
save_each_RN = True

[sim-train_set]
; Training IO dataset options

; csv file containing the inputs and desired outputs.
; If IO_fname is not None, then N_in and N_out are ignored.
IO_fname = IO_XOR.csv
; Max number of burns per step
max_burns = 3
; Max number of epochs (ie, how many times to cycle through IO list)
max_epochs = 4
; Threshold, as a fraction of the lowest current desired output
; If this is low, then you are asking the training to continue for a long time
threshold_fraction = 0.90
; How many fibers to burn per burn step
burn_rate = 3
; Whether to save a plot of the RN power & voltage at each burn
save_each_p = False
save_each_v = False
save_each_RN = False
; Whether to save the RN after each epoch finishes
save_epoch_trained_RN = True
; Whether to calculate a measure of the error of the network by running a fwd_pass
;   and taking the root mean of the residuals squared.
;   if RMSR_mode == "Max", then take the max of all the output currents to be the
;     desired output current for all HIGH outputs.
;   if RMSR_mode == "Rel", then take the sum of the input currents with the given
;     inputs divided by the number of HIGH outputs to be the desired output 
;     current for all HIGH outputs.
;   if RMSR_mode == "None", then don't bother calculating RMSR
RMSR_mode = Rel
; Whether to plot a graph of RMSR across each epoch
plot_RMSR = False
; Whether to begin by burning between the inputs and outputs and how much to burn. The purpose is to make them more independant of each other. This fraction represents what fraction of the RN's fibers to eliminate. e.g. 0.001 --> 0.1% of the fibers.
II_OO_preburn_fraction = 0.001
; Whether to burn fibers or edges. I'm not sure which is more physically realistic.
burn_fibers = False
II_OO_preburn_fraction = 0
;0.001

[sim-fwd_pass]
; Forward pass options

; csv file containing the inputs (and desired outputs).
; If IO_fname is not None, then N_in is ignored.
IO_fname = IO_XOR.csv
; Binary number to pass in. Or "All" to scan all combinations of inputs
N_in = All
; How to determine the threshold.
;   "None" : Just report the output currents
;   "Fraction-Max" : Fraction of the max output current of all combinations
;   "Fraction-InH" : Fraction of the max output current with all inputs High
;   "Fraction-Rel" : Fraction of the max output current for each set of inputs
;   float : Provide the current which will serve as the threshold current
threshold = Fraction-Rel
; Threshold fraction. Only used if threshold = "Fraction"
threshold_fraction = 0.75
; Whether to save a copy of the RN with current flowing through it
save_RN = True

[sim-expand]
; Expansion sim options

; Name of pins to calculate resistance across
pin0 = in0
pin1 = out1
; How much to expand the network
expansion_percent = 0.1
; Whether to pickle the expanded network
save_expanded = True

[plot]
; Plotting options

node_size = 4
ln_width = 0.3
pin_color = green
; figure size (sent directly as arg to plt.figure)
; ex: 24, 20 -- 48, 40 -- 36, 30
figsize = 24, 20
; Plotting camera view angles (elev, azim)
; ; Default: 12, -110     Side: 0, -90
view_angles = 0, -90

[RN-fiber]
; Options for the fibers in the Resistor Network

; Number of fibers
N = 3000
; Max distance for connections between fibers
cnd_len = 0.30
; Boolean: use fibers with length (as opposed to points)
fibers = True
; These next 5 lists describe the properties of the classes of fibers in this RN. These lists should each have the same length.
; Mean fiber lengths
fl_mus = 0.50, 0.05
; Standard deviation of fiber lengths
fl_sgs = 0.005, 0.005
; Avg max power before burning
bpwr_mus = .02, .01
; Standard deviation of the distribution of burn power. This is analogous to having variance in the fiber thickness
bpwr_sgs = .001, .001
; The relative proportions of each fiber type. Should add to 1.
ftype_proportions = .99, .01

[RN-dim]
; Dimensions of the Resistor Network
;   This will be ignored if [sim].RN_preset is not None

; x, y, and z limits that define the dimensions of the network
xlims = -2.5,2.5
ylims = -2.5,2.5
; Set to 0,0 for a 2d network
zlims = -2.5,2.5
; Radius of pins
pin_r = 0.5

[RN-res]
; Options for the resistance calculations

; Resistance btw pins and the fibers they touch (Arbitrary low number)
pin_res = 1e-2
; Coefficient for resistance calculation btw fibers
res_k = 200
; Coefficient for argument in sinh. IE how steep is the i-v curve if nonlinear.
res_w = 20
; This would be the resistance btw two fibers if they are touching
min_res = 1e-2
; Whether to use linear ("L"), sinh, or relu i-v curve
ivfun = sinh
; Which solution method to use of:
;   "spsolve" : Sparse Solver (Only works if the network is well-connected)
;   "splsqr" : Sparse Least Squares (Not recommended, since Lpl is symmetric)
;   "cg" : Conjugate Gradiant (Recommended linear solver)
;   "n-k" : Newton-Krylov (Nonlinear solver)
;   "trf" : Trust Region Reflective algorithm for least squares
;   "hybr" : Hybrid solver (Fastest nonlinear solver)
;   "custom"
;   "optax-adam"
;   "mlt" : Multiple -- cg, then hybr, then trf, then n-k
;   "adpt" : Adaptive -- The stopping tolerance depends on the current
sol_method = mlt
; xtol : stopping tolerance in x. Used by nonlinear solvers.
xtol = 1e-5
ftol = 1e-2

[RN-in_pins]
; List of input pins in the network with their locations
;   This will be ignored if [sim].RN_preset is not None

; This line creates a pin named "in0" at (-1.5, -1.5, -1.5)
in0 = -1.5, -1.5, -1.5
in1 = -1.5, 1.5, -1.5
in2 = -1.5, 0, 1.5

[RN-out_pins]
; List of output pins in the network with their locations
;   This will be ignored if [sim].RN_preset is not None

out0 = 1.5, -1.5, 1.5
out1 = 1.5, 1.5, 1.5
out2 = 1.5, 0, -1.5

; The following sections contain the dimensions and pin locations for the
;   standard preset sims specified by [sim].RN_preset

;   db9

[preset_db9_dim]
; This is kind of an ugly patch... The following is the original python code:
;  # (http://www.interfacebus.com/D-sub-pin-positions-9-pin.jpg)
;  sH = 2.743 #Horizontal spacing (in this case vertical)
;  sV = 2.845
;  pR = sV/4 #pin R (taken to be 1/2 of sV/2)
;  # Approx. size of the DB9 in mm 
;  shape = [0, 4*pR+sV, 0, 4*pR+4*sH] 
xlims = 0,5.69
ylims = 0,13.817
zlims = 0,0
pin_r = 0.71125

[preset_db9_in_pins]
;  # Input pins
;  pins = [("pin1", 2*pR, 2*pR), ("pin2", 2*pR, 2*pR+sH), ("pin3", 2*pR, 2*pR+2*sH), 
;    ("pin4", 2*pR, 2*pR+3*sH), ("pin5", 2*pR, 2*pR+4*sH), ("pin6", 2*pR+sV, 2*pR+.5*sH),
;    ("pin7", 2*pR+sV, 2*pR+1.5*sH), ("pin8", 2*pR+sV, 2*pR+2.5*sH), ("pin9", 2*pR+sV, 2*pR+3.5*sH)]
pin1 = 1.4225,1.4225
pin2 = 1.4225,4.1655
pin3 = 1.4225,6.9085
pin4 = 1.4225,9.6515
pin5 = 1.4225,12.3945

[preset_db9_out_pins]
;  # Output pins
;  pins = [("pin1", 2*pR, 2*pR), ("pin2", 2*pR, 2*pR+sH), ("pin3", 2*pR, 2*pR+2*sH), 
;    ("pin4", 2*pR, 2*pR+3*sH), ("pin5", 2*pR, 2*pR+4*sH), ("pin6", 2*pR+sV, 2*pR+.5*sH),
;    ("pin7", 2*pR+sV, 2*pR+1.5*sH), ("pin8", 2*pR+sV, 2*pR+2.5*sH), ("pin9", 2*pR+sV, 2*pR+3.5*sH)]
pin6 = 4.2675,2.794
pin7 = 4.2675,5.537
pin8 = 4.2675,8.280
pin9 = 4.2675,11.023

; 3dc6p

[preset_3dc6p_dim]
xlims = -2.5,2.5
ylims = -2.5,2.5
zlims = -2.5,2.5

[preset_3dc6p_in_pins]
in0 = -1.5, -1.5, -1.5
in1 = -1.5, 1.5, -1.5
in2 = -1.5, 0, 1.5

[preset_3dc6p_out_pins]
out0 = 1.5, -1.5, 1.5
out1 = 1.5, 1.5, 1.5
out2 = 1.5, 0, -1.5

; 2ds4p

[preset_2ds4p_dim]
xlims = -2.5,2.5
ylims = -2.5,2.5
zlims = 0,0

[preset_2ds4p_in_pins]
in0 = -1.5, -1.5
in1 = -1.5, 1.5

[preset_2ds4p_out_pins]
out0 = 1.5, -1.5
out1 = 1.5, 1.5

; 3df2d

[preset_3df2d_dim]
xlims = -2.5,2.5
ylims = -0.5,0.5
zlims = -2.5,2.5

[preset_3df2d_in_pins]
in0 = -1.5, 0, -1.5
in1 = -1.5, 0, 1.5

[preset_3df2d_out_pins]
out0 = 1.5, 0, -1.75
out1 = 1.5, 0, 0
out2 = 1.5, 0, 1.75

; 3df2dx2

[preset_3df2dx2_dim]
xlims = -5,5
ylims = -1,1
zlims = -5,5
pin_r = 1

[preset_3df2dx2_in_pins]
in0 = -3, 0, -3
in1 = -3, 0, 3

[preset_3df2dx2_out_pins]
out0 = 3, 0, -3.5
out1 = 3, 0, 0
out2 = 3, 0, 3.5

; f22

[preset_f22_dim]
xlims = -2.5,2.5
ylims = -0.5,0.5
zlims = -2.5,2.5

[preset_f22_in_pins]
in0 = -1.5, 0, -1.5
in1 = -1.5, 0, 1.5

[preset_f22_out_pins]
out0 = 1.5, 0, -1.5
out1 = 1.5, 0, 1.5

; T22 - TINY 2-2

[preset_T22_dim]
xlims = -1,1
ylims = -0.1,0.1
zlims = -1,1

[preset_T22_in_pins]
in0 = -.75, 0, -.75
in1 = -.75, 0, .75

[preset_T22_out_pins]
out0 = .75, 0, -.75
out1 = .75, 0, .75
